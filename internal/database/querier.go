// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

type Querier interface {
	// AssignPermissionToRole assigns a permission to a role.
	AssignPermissionToRole(ctx context.Context, arg AssignPermissionToRoleParams) error
	// AssignRoleToUser assigns a role to a user.
	AssignRoleToUser(ctx context.Context, arg AssignRoleToUserParams) error
	// CreateAccount creates a new user and returns selected fields.
	CreateAccount(ctx context.Context, arg CreateAccountParams) (CreateAccountRow, error)
	// ========================
	// 002
	// ========================
	CreateExam(ctx context.Context, arg CreateExamParams) (uuid.UUID, error)
	CreateExamPart(ctx context.Context, arg CreateExamPartParams) (uuid.UUID, error)
	//-
	// Paragraphs Queries
	//-
	CreateParagraph(ctx context.Context, arg CreateParagraphParams) (uuid.UUID, error)
	// CreatePermission creates a new permission.
	CreatePermission(ctx context.Context, arg CreatePermissionParams) error
	//-
	// Questions Queries
	//-
	CreateQuestion(ctx context.Context, arg CreateQuestionParams) (CreateQuestionRow, error)
	// CreateRole creates a new role.
	CreateRole(ctx context.Context, arg CreateRoleParams) error
	// 00002
	// CreateUserProfile creates a new Userprofile.
	CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) error
	DeleteExam(ctx context.Context, examID uuid.UUID) error
	DeleteExamPart(ctx context.Context, partID uuid.UUID) error
	DeleteParagraph(ctx context.Context, paragraphID uuid.UUID) error
	// DeletePermission deletes a permission by its ID.
	DeletePermission(ctx context.Context, id uuid.UUID) error
	DeleteQuestion(ctx context.Context, questionID uuid.UUID) error
	// DeleteRole deletes a role by its ID.
	DeleteRole(ctx context.Context, id uuid.UUID) error
	GetCountSeparateQuestionsByPartID(ctx context.Context, partID uuid.UUID) (int64, error)
	GetExam(ctx context.Context, examID uuid.UUID) (Exam, error)
	GetExamPartByID(ctx context.Context, partID uuid.UUID) (ExamPart, error)
	GetExamPartsByExamId(ctx context.Context, examID uuid.NullUUID) ([]ExamPart, error)
	GetExamsCount(ctx context.Context) (int64, error)
	GetPaginatedExams(ctx context.Context, arg GetPaginatedExamsParams) ([]Exam, error)
	GetPaginatedPracticeExamParts(ctx context.Context, arg GetPaginatedPracticeExamPartsParams) ([]ExamPart, error)
	GetPaginatedSeparateQuestionsByPartID(ctx context.Context, arg GetPaginatedSeparateQuestionsByPartIDParams) ([]Question, error)
	// GetPaginatedUsers retrieves a list of users with pagination.
	GetPaginatedUsers(ctx context.Context, arg GetPaginatedUsersParams) ([]GetPaginatedUsersRow, error)
	GetParagraphByID(ctx context.Context, paragraphID uuid.UUID) (Paragraph, error)
	GetParagraphByPartId(ctx context.Context, partID uuid.UUID) ([]Paragraph, error)
	// GetPermissions retrieves all permissions.
	GetPermissions(ctx context.Context) ([]Permission, error)
	GetPracticeExamPartCount(ctx context.Context) (int64, error)
	GetQuestionByID(ctx context.Context, questionID uuid.UUID) (Question, error)
	GetRole(ctx context.Context) (GetRoleRow, error)
	// GetRoles retrieves all roles.
	GetRoles(ctx context.Context) ([]Role, error)
	GetUserAvatar(ctx context.Context, userID uuid.UUID) (sql.NullString, error)
	// GetUserByEmailOrUserNameOrId retrieves a user by email, user_name, or id.
	GetUserByEmailOrUserNameOrId(ctx context.Context, arg GetUserByEmailOrUserNameOrIdParams) (GetUserByEmailOrUserNameOrIdRow, error)
	GetUserProfile(ctx context.Context, userID uuid.UUID) (GetUserProfileRow, error)
	// GetUsersCount returns the total number of users.
	GetUsersCount(ctx context.Context) (int64, error)
	// HasPermission checks if a user has a specific permission.
	HasPermission(ctx context.Context, arg HasPermissionParams) (bool, error)
	ListParagraphs(ctx context.Context) ([]Paragraph, error)
	ListParagraphsByPartID(ctx context.Context, partID uuid.UUID) ([]Paragraph, error)
	ListQuestions(ctx context.Context) ([]Question, error)
	ListQuestionsByParagraphID(ctx context.Context, paragraphID uuid.NullUUID) ([]Question, error)
	ListQuestionsByPartID(ctx context.Context, partID uuid.UUID) ([]Question, error)
	// LockUser to lock user account
	LockUser(ctx context.Context, arg LockUserParams) (sql.Result, error)
	// PermissionExists checks if a permission with the given ID exists.
	PermissionExists(ctx context.Context, id uuid.UUID) (bool, error)
	// RoleExists checks if a role with the given ID exists.
	RoleExists(ctx context.Context, id uuid.UUID) (bool, error)
	// UnlockUser to unlock user account
	UnlockUser(ctx context.Context, arg UnlockUserParams) (sql.Result, error)
	UpdateExam(ctx context.Context, arg UpdateExamParams) error
	UpdateExamPart(ctx context.Context, arg UpdateExamPartParams) error
	UpdateParagraph(ctx context.Context, arg UpdateParagraphParams) error
	UpdateParagraphAudioURL(ctx context.Context, arg UpdateParagraphAudioURLParams) error
	UpdateParagraphImageURL(ctx context.Context, arg UpdateParagraphImageURLParams) error
	// UpdatePassword updates the password for a given user ID.
	UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (sql.Result, error)
	UpdateQuestion(ctx context.Context, arg UpdateQuestionParams) error
	UpdateQuestionAudioURL(ctx context.Context, arg UpdateQuestionAudioURLParams) error
	UpdateQuestionImageURL(ctx context.Context, arg UpdateQuestionImageURLParams) error
	UpdateUserAvatar(ctx context.Context, arg UpdateUserAvatarParams) error
	UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) error
}

var _ Querier = (*Queries)(nil)
