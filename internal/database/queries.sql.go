// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const assignPermissionToRole = `-- name: AssignPermissionToRole :exec
INSERT INTO role_permissions (role_id, permission_id)
VALUES ($1, $2)
`

type AssignPermissionToRoleParams struct {
	RoleID       uuid.UUID `json:"role_id"`
	PermissionID uuid.UUID `json:"permission_id"`
}

// AssignPermissionToRole assigns a permission to a role.
func (q *Queries) AssignPermissionToRole(ctx context.Context, arg AssignPermissionToRoleParams) error {
	_, err := q.db.ExecContext(ctx, assignPermissionToRole, arg.RoleID, arg.PermissionID)
	return err
}

const assignRoleToUser = `-- name: AssignRoleToUser :exec
INSERT INTO user_roles (user_id, role_id)
VALUES ($1, $2)
`

type AssignRoleToUserParams struct {
	UserID uuid.UUID `json:"user_id"`
	RoleID uuid.UUID `json:"role_id"`
}

// AssignRoleToUser assigns a role to a user.
func (q *Queries) AssignRoleToUser(ctx context.Context, arg AssignRoleToUserParams) error {
	_, err := q.db.ExecContext(ctx, assignRoleToUser, arg.UserID, arg.RoleID)
	return err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO users (user_name, email, password)
VALUES ($1, $2, $3)
RETURNING id, user_name, email
`

type CreateAccountParams struct {
	UserName string `json:"user_name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type CreateAccountRow struct {
	ID       uuid.UUID `json:"id"`
	UserName string    `json:"user_name"`
	Email    string    `json:"email"`
}

// CreateAccount creates a new user and returns selected fields.
func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (CreateAccountRow, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.UserName, arg.Email, arg.Password)
	var i CreateAccountRow
	err := row.Scan(&i.ID, &i.UserName, &i.Email)
	return i, err
}

const createExam = `-- name: CreateExam :one

INSERT INTO Exams (
    exam_title,
    description,
    duration_minutes,
    exam_type,
    max_listening_score,
    max_reading_score,
    max_speaking_score,
    max_writing_score,
    total_score
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8, $9
         ) RETURNING exam_id
`

type CreateExamParams struct {
	ExamTitle         string         `json:"exam_title"`
	Description       sql.NullString `json:"description"`
	DurationMinutes   sql.NullInt32  `json:"duration_minutes"`
	ExamType          string         `json:"exam_type"`
	MaxListeningScore sql.NullInt32  `json:"max_listening_score"`
	MaxReadingScore   sql.NullInt32  `json:"max_reading_score"`
	MaxSpeakingScore  sql.NullInt32  `json:"max_speaking_score"`
	MaxWritingScore   sql.NullInt32  `json:"max_writing_score"`
	TotalScore        sql.NullInt32  `json:"total_score"`
}

// ========================
// 002
// ========================
func (q *Queries) CreateExam(ctx context.Context, arg CreateExamParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createExam,
		arg.ExamTitle,
		arg.Description,
		arg.DurationMinutes,
		arg.ExamType,
		arg.MaxListeningScore,
		arg.MaxReadingScore,
		arg.MaxSpeakingScore,
		arg.MaxWritingScore,
		arg.TotalScore,
	)
	var exam_id uuid.UUID
	err := row.Scan(&exam_id)
	return exam_id, err
}

const createExamPart = `-- name: CreateExamPart :one
INSERT INTO exam_parts (
    exam_id,
    part_title,
    part_order,
    description,
    is_practice_component,
    plan_type,
    toeic_part_number
) VALUES (
             $1, $2, $3, $4, $5, $6, $7
         ) RETURNING part_id
`

type CreateExamPartParams struct {
	ExamID              uuid.NullUUID  `json:"exam_id"`
	PartTitle           string         `json:"part_title"`
	PartOrder           sql.NullInt32  `json:"part_order"`
	Description         sql.NullString `json:"description"`
	IsPracticeComponent sql.NullBool   `json:"is_practice_component"`
	PlanType            string         `json:"plan_type"`
	ToeicPartNumber     sql.NullInt32  `json:"toeic_part_number"`
}

func (q *Queries) CreateExamPart(ctx context.Context, arg CreateExamPartParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createExamPart,
		arg.ExamID,
		arg.PartTitle,
		arg.PartOrder,
		arg.Description,
		arg.IsPracticeComponent,
		arg.PlanType,
		arg.ToeicPartNumber,
	)
	var part_id uuid.UUID
	err := row.Scan(&part_id)
	return part_id, err
}

const createParagraph = `-- name: CreateParagraph :one

INSERT INTO Paragraphs (
    paragraph_content,
    title,
    part_id,
    paragraph_order,
    paragraph_type,
    audio_url,
    image_url
) VALUES (
             $1, $2, $3, $4, $5, $6, $7
         ) RETURNING paragraph_id
`

type CreateParagraphParams struct {
	ParagraphContent string         `json:"paragraph_content"`
	Title            sql.NullString `json:"title"`
	PartID           uuid.UUID      `json:"part_id"`
	ParagraphOrder   int32          `json:"paragraph_order"`
	ParagraphType    sql.NullString `json:"paragraph_type"`
	AudioUrl         sql.NullString `json:"audio_url"`
	ImageUrl         sql.NullString `json:"image_url"`
}

// -
// Paragraphs Queries
// -
func (q *Queries) CreateParagraph(ctx context.Context, arg CreateParagraphParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createParagraph,
		arg.ParagraphContent,
		arg.Title,
		arg.PartID,
		arg.ParagraphOrder,
		arg.ParagraphType,
		arg.AudioUrl,
		arg.ImageUrl,
	)
	var paragraph_id uuid.UUID
	err := row.Scan(&paragraph_id)
	return paragraph_id, err
}

const createPermission = `-- name: CreatePermission :exec
INSERT INTO permissions (name, description)
VALUES ($1, $2)
`

type CreatePermissionParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

// CreatePermission creates a new permission.
func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) error {
	_, err := q.db.ExecContext(ctx, createPermission, arg.Name, arg.Description)
	return err
}

const createQuestion = `-- name: CreateQuestion :one

INSERT INTO Questions (
    question_content,
    question_type,
    part_id,
    paragraph_id,
    question_order,
    audio_url,
    image_url,
    toeic_question_section,
    question_number_in_part,
    answer_option,
    correct_answer
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
         ) RETURNING question_id,question_content,question_type,part_id,paragraph_id,question_order,audio_url,image_url,toeic_question_section,question_number_in_part
`

type CreateQuestionParams struct {
	QuestionContent      string                `json:"question_content"`
	QuestionType         string                `json:"question_type"`
	PartID               uuid.UUID             `json:"part_id"`
	ParagraphID          uuid.NullUUID         `json:"paragraph_id"`
	QuestionOrder        int32                 `json:"question_order"`
	AudioUrl             sql.NullString        `json:"audio_url"`
	ImageUrl             sql.NullString        `json:"image_url"`
	ToeicQuestionSection string                `json:"toeic_question_section"`
	QuestionNumberInPart sql.NullInt32         `json:"question_number_in_part"`
	AnswerOption         pqtype.NullRawMessage `json:"answer_option"`
	CorrectAnswer        sql.NullString        `json:"correct_answer"`
}

type CreateQuestionRow struct {
	QuestionID           uuid.UUID      `json:"question_id"`
	QuestionContent      string         `json:"question_content"`
	QuestionType         string         `json:"question_type"`
	PartID               uuid.UUID      `json:"part_id"`
	ParagraphID          uuid.NullUUID  `json:"paragraph_id"`
	QuestionOrder        int32          `json:"question_order"`
	AudioUrl             sql.NullString `json:"audio_url"`
	ImageUrl             sql.NullString `json:"image_url"`
	ToeicQuestionSection string         `json:"toeic_question_section"`
	QuestionNumberInPart sql.NullInt32  `json:"question_number_in_part"`
}

// -
// Questions Queries
// -
func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (CreateQuestionRow, error) {
	row := q.db.QueryRowContext(ctx, createQuestion,
		arg.QuestionContent,
		arg.QuestionType,
		arg.PartID,
		arg.ParagraphID,
		arg.QuestionOrder,
		arg.AudioUrl,
		arg.ImageUrl,
		arg.ToeicQuestionSection,
		arg.QuestionNumberInPart,
		arg.AnswerOption,
		arg.CorrectAnswer,
	)
	var i CreateQuestionRow
	err := row.Scan(
		&i.QuestionID,
		&i.QuestionContent,
		&i.QuestionType,
		&i.PartID,
		&i.ParagraphID,
		&i.QuestionOrder,
		&i.AudioUrl,
		&i.ImageUrl,
		&i.ToeicQuestionSection,
		&i.QuestionNumberInPart,
	)
	return i, err
}

const createRole = `-- name: CreateRole :exec
INSERT INTO roles (name, description)
VALUES ($1, $2)
`

type CreateRoleParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

// CreateRole creates a new role.
func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) error {
	_, err := q.db.ExecContext(ctx, createRole, arg.Name, arg.Description)
	return err
}

const createUserProfile = `-- name: CreateUserProfile :exec

INSERT INTO user_profiles(user_id, full_name, birthday, gender, phone_number, address, bio)
VALUES($1,$2,$3,$4,$5,$6,$7)
`

type CreateUserProfileParams struct {
	UserID      uuid.UUID      `json:"user_id"`
	FullName    sql.NullString `json:"full_name"`
	Birthday    sql.NullTime   `json:"birthday"`
	Gender      sql.NullString `json:"gender"`
	PhoneNumber sql.NullString `json:"phone_number"`
	Address     sql.NullString `json:"address"`
	Bio         sql.NullString `json:"bio"`
}

// 00002
// CreateUserProfile creates a new Userprofile.
func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) error {
	_, err := q.db.ExecContext(ctx, createUserProfile,
		arg.UserID,
		arg.FullName,
		arg.Birthday,
		arg.Gender,
		arg.PhoneNumber,
		arg.Address,
		arg.Bio,
	)
	return err
}

const deleteExam = `-- name: DeleteExam :exec
DELETE FROM Exams
WHERE
    exam_id = $1
`

func (q *Queries) DeleteExam(ctx context.Context, examID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteExam, examID)
	return err
}

const deleteExamPart = `-- name: DeleteExamPart :exec
DELETE FROM exam_parts
WHERE
    part_id = $1
`

func (q *Queries) DeleteExamPart(ctx context.Context, partID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteExamPart, partID)
	return err
}

const deleteParagraph = `-- name: DeleteParagraph :exec
DELETE FROM Paragraphs
WHERE
    paragraph_id = $1
`

func (q *Queries) DeleteParagraph(ctx context.Context, paragraphID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteParagraph, paragraphID)
	return err
}

const deletePermission = `-- name: DeletePermission :exec
DELETE FROM permissions WHERE id = $1
`

// DeletePermission deletes a permission by its ID.
func (q *Queries) DeletePermission(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePermission, id)
	return err
}

const deleteQuestion = `-- name: DeleteQuestion :exec
DELETE FROM Questions
WHERE
    question_id = $1
`

func (q *Queries) DeleteQuestion(ctx context.Context, questionID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteQuestion, questionID)
	return err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles WHERE id = $1
`

// DeleteRole deletes a role by its ID.
func (q *Queries) DeleteRole(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRole, id)
	return err
}

const getCountSeparateQuestionsByPartID = `-- name: GetCountSeparateQuestionsByPartID :one
SELECT
    count(*)
FROM
    Questions
WHERE
    part_id = $1 and paragraph_id ISNULL
`

func (q *Queries) GetCountSeparateQuestionsByPartID(ctx context.Context, partID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getCountSeparateQuestionsByPartID, partID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getExam = `-- name: GetExam :one
SELECT
    exam_id,
    exam_title,
    description,
    duration_minutes,
    exam_type,
    max_listening_score,
    max_reading_score,
    max_speaking_score,
    max_writing_score,
    total_score,
    created_at,
    updated_at
FROM
    Exams
WHERE
    exam_id = $1
`

func (q *Queries) GetExam(ctx context.Context, examID uuid.UUID) (Exam, error) {
	row := q.db.QueryRowContext(ctx, getExam, examID)
	var i Exam
	err := row.Scan(
		&i.ExamID,
		&i.ExamTitle,
		&i.Description,
		&i.DurationMinutes,
		&i.ExamType,
		&i.MaxListeningScore,
		&i.MaxReadingScore,
		&i.MaxSpeakingScore,
		&i.MaxWritingScore,
		&i.TotalScore,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getExamPartByID = `-- name: GetExamPartByID :one
SELECT
    part_id,
    exam_id,
    part_title,
    part_order,
    description,
    is_practice_component,
    plan_type,
    created_at,
    updated_at,
    toeic_part_number
FROM
    exam_parts
WHERE
    part_id = $1
`

func (q *Queries) GetExamPartByID(ctx context.Context, partID uuid.UUID) (ExamPart, error) {
	row := q.db.QueryRowContext(ctx, getExamPartByID, partID)
	var i ExamPart
	err := row.Scan(
		&i.PartID,
		&i.ExamID,
		&i.PartTitle,
		&i.PartOrder,
		&i.Description,
		&i.IsPracticeComponent,
		&i.PlanType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ToeicPartNumber,
	)
	return i, err
}

const getExamPartsByExamId = `-- name: GetExamPartsByExamId :many
SELECT
    part_id,
    exam_id,
    part_title,
    part_order,
    description,
    is_practice_component,
    plan_type,
    created_at,
    updated_at,
    toeic_part_number
FROM
    exam_parts
WHERE
    exam_id = $1
ORDER BY
    part_order
`

func (q *Queries) GetExamPartsByExamId(ctx context.Context, examID uuid.NullUUID) ([]ExamPart, error) {
	rows, err := q.db.QueryContext(ctx, getExamPartsByExamId, examID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ExamPart{}
	for rows.Next() {
		var i ExamPart
		if err := rows.Scan(
			&i.PartID,
			&i.ExamID,
			&i.PartTitle,
			&i.PartOrder,
			&i.Description,
			&i.IsPracticeComponent,
			&i.PlanType,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ToeicPartNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExamsCount = `-- name: GetExamsCount :one
SELECT COUNT(*) FROM exams
`

func (q *Queries) GetExamsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getExamsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPaginatedExams = `-- name: GetPaginatedExams :many
SELECT
    exam_id,
    exam_title,
    description,
    duration_minutes,
    exam_type,
    max_listening_score,
    max_reading_score,
    max_speaking_score,
    max_writing_score,
    total_score,
    created_at,
    updated_at
FROM
    Exams
LIMIT $1 OFFSET $2
`

type GetPaginatedExamsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetPaginatedExams(ctx context.Context, arg GetPaginatedExamsParams) ([]Exam, error) {
	rows, err := q.db.QueryContext(ctx, getPaginatedExams, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Exam{}
	for rows.Next() {
		var i Exam
		if err := rows.Scan(
			&i.ExamID,
			&i.ExamTitle,
			&i.Description,
			&i.DurationMinutes,
			&i.ExamType,
			&i.MaxListeningScore,
			&i.MaxReadingScore,
			&i.MaxSpeakingScore,
			&i.MaxWritingScore,
			&i.TotalScore,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedPracticeExamParts = `-- name: GetPaginatedPracticeExamParts :many
SELECT
    part_id,
    exam_id,
    part_title,
    part_order,
    description,
    is_practice_component,
    plan_type,
    created_at,
    updated_at,
    toeic_part_number
FROM
    exam_parts
WHERE
    is_practice_component == 'TRUE'
LIMIT $1 OFFSET $2
`

type GetPaginatedPracticeExamPartsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetPaginatedPracticeExamParts(ctx context.Context, arg GetPaginatedPracticeExamPartsParams) ([]ExamPart, error) {
	rows, err := q.db.QueryContext(ctx, getPaginatedPracticeExamParts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ExamPart{}
	for rows.Next() {
		var i ExamPart
		if err := rows.Scan(
			&i.PartID,
			&i.ExamID,
			&i.PartTitle,
			&i.PartOrder,
			&i.Description,
			&i.IsPracticeComponent,
			&i.PlanType,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ToeicPartNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedSeparateQuestionsByPartID = `-- name: GetPaginatedSeparateQuestionsByPartID :many
SELECT
    question_id,
    question_content,
    question_type,
    part_id,
    paragraph_id,
    question_order,
    audio_url,
    image_url,
    toeic_question_section,
    question_number_in_part,
    answer_option,
    correct_answer,
    created_at,
    updated_at
FROM
    Questions
WHERE
    part_id = $1 and paragraph_id ISNULL
Order By
    question_order ASC,
    question_number_in_part ASC,
    question_id ASC
Limit $2 OFFSET $3
`

type GetPaginatedSeparateQuestionsByPartIDParams struct {
	PartID uuid.UUID `json:"part_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) GetPaginatedSeparateQuestionsByPartID(ctx context.Context, arg GetPaginatedSeparateQuestionsByPartIDParams) ([]Question, error) {
	rows, err := q.db.QueryContext(ctx, getPaginatedSeparateQuestionsByPartID, arg.PartID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Question{}
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.QuestionID,
			&i.QuestionContent,
			&i.QuestionType,
			&i.PartID,
			&i.ParagraphID,
			&i.QuestionOrder,
			&i.AudioUrl,
			&i.ImageUrl,
			&i.ToeicQuestionSection,
			&i.QuestionNumberInPart,
			&i.AnswerOption,
			&i.CorrectAnswer,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedUsers = `-- name: GetPaginatedUsers :many
SELECT id, user_name, email, created_at, updated_at
FROM users
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetPaginatedUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetPaginatedUsersRow struct {
	ID        uuid.UUID    `json:"id"`
	UserName  string       `json:"user_name"`
	Email     string       `json:"email"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

// GetPaginatedUsers retrieves a list of users with pagination.
func (q *Queries) GetPaginatedUsers(ctx context.Context, arg GetPaginatedUsersParams) ([]GetPaginatedUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getPaginatedUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPaginatedUsersRow{}
	for rows.Next() {
		var i GetPaginatedUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.UserName,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getParagraphByID = `-- name: GetParagraphByID :one
SELECT
    paragraph_id,
    paragraph_content,
    title,
    part_id,
    paragraph_order,
    paragraph_type,
    audio_url,
    image_url,
    created_at,
    updated_at
FROM
    Paragraphs
WHERE
    paragraph_id = $1
`

func (q *Queries) GetParagraphByID(ctx context.Context, paragraphID uuid.UUID) (Paragraph, error) {
	row := q.db.QueryRowContext(ctx, getParagraphByID, paragraphID)
	var i Paragraph
	err := row.Scan(
		&i.ParagraphID,
		&i.ParagraphContent,
		&i.Title,
		&i.PartID,
		&i.ParagraphOrder,
		&i.ParagraphType,
		&i.AudioUrl,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getParagraphByPartId = `-- name: GetParagraphByPartId :many
SELECT
    paragraph_id,
    paragraph_content,
    title,
    part_id,
    paragraph_order,
    paragraph_type,
    audio_url,
    image_url,
    created_at,
    updated_at
FROM
    Paragraphs
WHERE
    part_id = $1
`

func (q *Queries) GetParagraphByPartId(ctx context.Context, partID uuid.UUID) ([]Paragraph, error) {
	rows, err := q.db.QueryContext(ctx, getParagraphByPartId, partID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Paragraph{}
	for rows.Next() {
		var i Paragraph
		if err := rows.Scan(
			&i.ParagraphID,
			&i.ParagraphContent,
			&i.Title,
			&i.PartID,
			&i.ParagraphOrder,
			&i.ParagraphType,
			&i.AudioUrl,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissions = `-- name: GetPermissions :many
SELECT id, name, description, created_at, updated_at
FROM permissions
`

// GetPermissions retrieves all permissions.
func (q *Queries) GetPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permission{}
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPracticeExamPartCount = `-- name: GetPracticeExamPartCount :one
SELECT COUNT(*) FROM exam_parts where is_practice_component == 'TRUE'
`

func (q *Queries) GetPracticeExamPartCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPracticeExamPartCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getQuestionByID = `-- name: GetQuestionByID :one
SELECT
    question_id,
    question_content,
    question_type,
    part_id,
    paragraph_id,
    question_order,
    audio_url,
    image_url,
    toeic_question_section,
    question_number_in_part,
    answer_option,
    correct_answer,
    created_at,
    updated_at
FROM
    Questions
WHERE
    question_id = $1
`

func (q *Queries) GetQuestionByID(ctx context.Context, questionID uuid.UUID) (Question, error) {
	row := q.db.QueryRowContext(ctx, getQuestionByID, questionID)
	var i Question
	err := row.Scan(
		&i.QuestionID,
		&i.QuestionContent,
		&i.QuestionType,
		&i.PartID,
		&i.ParagraphID,
		&i.QuestionOrder,
		&i.AudioUrl,
		&i.ImageUrl,
		&i.ToeicQuestionSection,
		&i.QuestionNumberInPart,
		&i.AnswerOption,
		&i.CorrectAnswer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRole = `-- name: GetRole :one
SELECT
    r.id AS role_id,
    r.name AS role_name,
    r.description AS role_description,
    p.id AS permission_id,
    p.name AS permission_name,
    p.description AS permission_description
FROM
    roles AS r
        JOIN
    role_permissions AS rp ON r.id = rp.role_id
        JOIN
    permissions AS p ON rp.permission_id = p.id
`

type GetRoleRow struct {
	RoleID                uuid.UUID      `json:"role_id"`
	RoleName              string         `json:"role_name"`
	RoleDescription       sql.NullString `json:"role_description"`
	PermissionID          uuid.UUID      `json:"permission_id"`
	PermissionName        string         `json:"permission_name"`
	PermissionDescription sql.NullString `json:"permission_description"`
}

func (q *Queries) GetRole(ctx context.Context) (GetRoleRow, error) {
	row := q.db.QueryRowContext(ctx, getRole)
	var i GetRoleRow
	err := row.Scan(
		&i.RoleID,
		&i.RoleName,
		&i.RoleDescription,
		&i.PermissionID,
		&i.PermissionName,
		&i.PermissionDescription,
	)
	return i, err
}

const getRoles = `-- name: GetRoles :many
SELECT id, name, description, created_at, updated_at
FROM roles
`

// GetRoles retrieves all roles.
func (q *Queries) GetRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserAvatar = `-- name: GetUserAvatar :one
SELECT avatar_url
FROM  user_profiles
where user_id =$1
`

func (q *Queries) GetUserAvatar(ctx context.Context, userID uuid.UUID) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getUserAvatar, userID)
	var avatar_url sql.NullString
	err := row.Scan(&avatar_url)
	return avatar_url, err
}

const getUserByEmailOrUserNameOrId = `-- name: GetUserByEmailOrUserNameOrId :one
SELECT id, user_name, email, password, created_at, updated_at
FROM users
WHERE
    ($1::text IS NULL OR email = $1::text) AND
    ($2::text IS NULL OR user_name = $2::text) AND
    ($3::uuid IS NULL OR id = $3::uuid)
LIMIT 1
`

type GetUserByEmailOrUserNameOrIdParams struct {
	Email    sql.NullString `json:"email"`
	UserName sql.NullString `json:"user_name"`
	ID       uuid.NullUUID  `json:"id"`
}

type GetUserByEmailOrUserNameOrIdRow struct {
	ID        uuid.UUID    `json:"id"`
	UserName  string       `json:"user_name"`
	Email     string       `json:"email"`
	Password  string       `json:"password"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

// GetUserByEmailOrUserNameOrId retrieves a user by email, user_name, or id.
func (q *Queries) GetUserByEmailOrUserNameOrId(ctx context.Context, arg GetUserByEmailOrUserNameOrIdParams) (GetUserByEmailOrUserNameOrIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmailOrUserNameOrId, arg.Email, arg.UserName, arg.ID)
	var i GetUserByEmailOrUserNameOrIdRow
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserProfile = `-- name: GetUserProfile :one
SELECT
    user_id,u.email,u.user_name,full_name,birthday,gender,phone_number,address,avatar_url,bio
FROM
    user_profiles p join users u on p.user_id = u.id
WHERE
    user_id = $1
`

type GetUserProfileRow struct {
	UserID      uuid.UUID      `json:"user_id"`
	Email       string         `json:"email"`
	UserName    string         `json:"user_name"`
	FullName    sql.NullString `json:"full_name"`
	Birthday    sql.NullTime   `json:"birthday"`
	Gender      sql.NullString `json:"gender"`
	PhoneNumber sql.NullString `json:"phone_number"`
	Address     sql.NullString `json:"address"`
	AvatarUrl   sql.NullString `json:"avatar_url"`
	Bio         sql.NullString `json:"bio"`
}

func (q *Queries) GetUserProfile(ctx context.Context, userID uuid.UUID) (GetUserProfileRow, error) {
	row := q.db.QueryRowContext(ctx, getUserProfile, userID)
	var i GetUserProfileRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.UserName,
		&i.FullName,
		&i.Birthday,
		&i.Gender,
		&i.PhoneNumber,
		&i.Address,
		&i.AvatarUrl,
		&i.Bio,
	)
	return i, err
}

const getUsersCount = `-- name: GetUsersCount :one
SELECT COUNT(*) FROM users
`

// GetUsersCount returns the total number of users.
func (q *Queries) GetUsersCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUsersCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const hasPermission = `-- name: HasPermission :one
SELECT EXISTS(
    SELECT 1 FROM user_roles ur
                      JOIN role_permissions rp ON ur.role_id = rp.role_id
                      JOIN permissions p ON rp.permission_id = p.id
    WHERE ur.user_id = $1 AND p.id = $2
)
`

type HasPermissionParams struct {
	UserID uuid.UUID `json:"user_id"`
	ID     uuid.UUID `json:"id"`
}

// HasPermission checks if a user has a specific permission.
func (q *Queries) HasPermission(ctx context.Context, arg HasPermissionParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, hasPermission, arg.UserID, arg.ID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const listParagraphs = `-- name: ListParagraphs :many
SELECT
    paragraph_id,
    paragraph_content,
    title,
    part_id,
    paragraph_order,
    paragraph_type,
    audio_url,
    image_url,
    created_at,
    updated_at
FROM
    Paragraphs
`

func (q *Queries) ListParagraphs(ctx context.Context) ([]Paragraph, error) {
	rows, err := q.db.QueryContext(ctx, listParagraphs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Paragraph{}
	for rows.Next() {
		var i Paragraph
		if err := rows.Scan(
			&i.ParagraphID,
			&i.ParagraphContent,
			&i.Title,
			&i.PartID,
			&i.ParagraphOrder,
			&i.ParagraphType,
			&i.AudioUrl,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listParagraphsByPartID = `-- name: ListParagraphsByPartID :many
SELECT
    paragraph_id,
    paragraph_content,
    title,
    part_id,
    paragraph_order,
    paragraph_type,
    audio_url,
    image_url,
    created_at,
    updated_at
FROM
    Paragraphs
WHERE
    part_id = $1
ORDER BY
    paragraph_order
`

func (q *Queries) ListParagraphsByPartID(ctx context.Context, partID uuid.UUID) ([]Paragraph, error) {
	rows, err := q.db.QueryContext(ctx, listParagraphsByPartID, partID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Paragraph{}
	for rows.Next() {
		var i Paragraph
		if err := rows.Scan(
			&i.ParagraphID,
			&i.ParagraphContent,
			&i.Title,
			&i.PartID,
			&i.ParagraphOrder,
			&i.ParagraphType,
			&i.AudioUrl,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuestions = `-- name: ListQuestions :many
SELECT
    question_id,
    question_content,
    question_type,
    part_id,
    paragraph_id,
    question_order,
    audio_url,
    image_url,
    toeic_question_section,
    question_number_in_part,
    answer_option,
    correct_answer,
    created_at,
    updated_at
FROM
    Questions
`

func (q *Queries) ListQuestions(ctx context.Context) ([]Question, error) {
	rows, err := q.db.QueryContext(ctx, listQuestions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Question{}
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.QuestionID,
			&i.QuestionContent,
			&i.QuestionType,
			&i.PartID,
			&i.ParagraphID,
			&i.QuestionOrder,
			&i.AudioUrl,
			&i.ImageUrl,
			&i.ToeicQuestionSection,
			&i.QuestionNumberInPart,
			&i.AnswerOption,
			&i.CorrectAnswer,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuestionsByParagraphID = `-- name: ListQuestionsByParagraphID :many
SELECT
    question_id,
    question_content,
    question_type,
    part_id,
    paragraph_id,
    question_order,
    audio_url,
    image_url,
    toeic_question_section,
    question_number_in_part,
    answer_option,
    correct_answer,
    created_at,
    updated_at
FROM
    Questions
WHERE
    paragraph_id = $1
Order By
    question_order ASC,
    question_number_in_part ASC,
    question_id ASC
`

func (q *Queries) ListQuestionsByParagraphID(ctx context.Context, paragraphID uuid.NullUUID) ([]Question, error) {
	rows, err := q.db.QueryContext(ctx, listQuestionsByParagraphID, paragraphID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Question{}
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.QuestionID,
			&i.QuestionContent,
			&i.QuestionType,
			&i.PartID,
			&i.ParagraphID,
			&i.QuestionOrder,
			&i.AudioUrl,
			&i.ImageUrl,
			&i.ToeicQuestionSection,
			&i.QuestionNumberInPart,
			&i.AnswerOption,
			&i.CorrectAnswer,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuestionsByPartID = `-- name: ListQuestionsByPartID :many
SELECT
    question_id,
    question_content,
    question_type,
    part_id,
    paragraph_id,
    question_order,
    audio_url,
    image_url,
    toeic_question_section,
    question_number_in_part,
    answer_option,
    correct_answer,
    created_at,
    updated_at
FROM
    Questions
WHERE
    part_id = $1
ORDER BY
    question_order
`

func (q *Queries) ListQuestionsByPartID(ctx context.Context, partID uuid.UUID) ([]Question, error) {
	rows, err := q.db.QueryContext(ctx, listQuestionsByPartID, partID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Question{}
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.QuestionID,
			&i.QuestionContent,
			&i.QuestionType,
			&i.PartID,
			&i.ParagraphID,
			&i.QuestionOrder,
			&i.AudioUrl,
			&i.ImageUrl,
			&i.ToeicQuestionSection,
			&i.QuestionNumberInPart,
			&i.AnswerOption,
			&i.CorrectAnswer,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const lockUser = `-- name: LockUser :execresult
UPDATE users
set is_locked=true,lock_reason=$1,locked_at=now()
where id=$2
`

type LockUserParams struct {
	LockReason sql.NullString `json:"lock_reason"`
	ID         uuid.UUID      `json:"id"`
}

// LockUser to lock user account
func (q *Queries) LockUser(ctx context.Context, arg LockUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, lockUser, arg.LockReason, arg.ID)
}

const permissionExists = `-- name: PermissionExists :one
SELECT EXISTS(SELECT 1 FROM permissions WHERE id = $1)
`

// PermissionExists checks if a permission with the given ID exists.
func (q *Queries) PermissionExists(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, permissionExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const roleExists = `-- name: RoleExists :one
SELECT EXISTS(SELECT 1 FROM roles WHERE id = $1)
`

// RoleExists checks if a role with the given ID exists.
func (q *Queries) RoleExists(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, roleExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const unlockUser = `-- name: UnlockUser :execresult
UPDATE users
set is_locked=false,unlock_reason=$1,unlocked_at=now()
where id=$2
`

type UnlockUserParams struct {
	UnlockReason sql.NullString `json:"unlock_reason"`
	ID           uuid.UUID      `json:"id"`
}

// UnlockUser to unlock user account
func (q *Queries) UnlockUser(ctx context.Context, arg UnlockUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, unlockUser, arg.UnlockReason, arg.ID)
}

const updateExam = `-- name: UpdateExam :exec
UPDATE Exams
SET
    exam_title = $2,
    description = $3,
    duration_minutes = $4,
    exam_type = $5,
    max_listening_score = $6,
    max_reading_score = $7,
    max_speaking_score = $8,
    max_writing_score = $9,
    total_score = $10
WHERE
    exam_id = $1
`

type UpdateExamParams struct {
	ExamID            uuid.UUID      `json:"exam_id"`
	ExamTitle         string         `json:"exam_title"`
	Description       sql.NullString `json:"description"`
	DurationMinutes   sql.NullInt32  `json:"duration_minutes"`
	ExamType          string         `json:"exam_type"`
	MaxListeningScore sql.NullInt32  `json:"max_listening_score"`
	MaxReadingScore   sql.NullInt32  `json:"max_reading_score"`
	MaxSpeakingScore  sql.NullInt32  `json:"max_speaking_score"`
	MaxWritingScore   sql.NullInt32  `json:"max_writing_score"`
	TotalScore        sql.NullInt32  `json:"total_score"`
}

func (q *Queries) UpdateExam(ctx context.Context, arg UpdateExamParams) error {
	_, err := q.db.ExecContext(ctx, updateExam,
		arg.ExamID,
		arg.ExamTitle,
		arg.Description,
		arg.DurationMinutes,
		arg.ExamType,
		arg.MaxListeningScore,
		arg.MaxReadingScore,
		arg.MaxSpeakingScore,
		arg.MaxWritingScore,
		arg.TotalScore,
	)
	return err
}

const updateExamPart = `-- name: UpdateExamPart :exec
UPDATE exam_parts
SET
    exam_id = $2,
    part_title = $3,
    part_order = $4,
    description = $5,
    is_practice_component = $6,
    plan_type = $7,
    toeic_part_number = $8
WHERE
    part_id = $1
`

type UpdateExamPartParams struct {
	PartID              uuid.UUID      `json:"part_id"`
	ExamID              uuid.NullUUID  `json:"exam_id"`
	PartTitle           string         `json:"part_title"`
	PartOrder           sql.NullInt32  `json:"part_order"`
	Description         sql.NullString `json:"description"`
	IsPracticeComponent sql.NullBool   `json:"is_practice_component"`
	PlanType            string         `json:"plan_type"`
	ToeicPartNumber     sql.NullInt32  `json:"toeic_part_number"`
}

func (q *Queries) UpdateExamPart(ctx context.Context, arg UpdateExamPartParams) error {
	_, err := q.db.ExecContext(ctx, updateExamPart,
		arg.PartID,
		arg.ExamID,
		arg.PartTitle,
		arg.PartOrder,
		arg.Description,
		arg.IsPracticeComponent,
		arg.PlanType,
		arg.ToeicPartNumber,
	)
	return err
}

const updateParagraph = `-- name: UpdateParagraph :exec
UPDATE Paragraphs
SET
    paragraph_content = $2,
    title = $3,
    part_id = $4,
    paragraph_order = $5,
    paragraph_type = $6
WHERE
    paragraph_id = $1
`

type UpdateParagraphParams struct {
	ParagraphID      uuid.UUID      `json:"paragraph_id"`
	ParagraphContent string         `json:"paragraph_content"`
	Title            sql.NullString `json:"title"`
	PartID           uuid.UUID      `json:"part_id"`
	ParagraphOrder   int32          `json:"paragraph_order"`
	ParagraphType    sql.NullString `json:"paragraph_type"`
}

func (q *Queries) UpdateParagraph(ctx context.Context, arg UpdateParagraphParams) error {
	_, err := q.db.ExecContext(ctx, updateParagraph,
		arg.ParagraphID,
		arg.ParagraphContent,
		arg.Title,
		arg.PartID,
		arg.ParagraphOrder,
		arg.ParagraphType,
	)
	return err
}

const updateParagraphAudioURL = `-- name: UpdateParagraphAudioURL :exec
UPDATE Paragraphs
SET
    audio_url = $2
WHERE
    paragraph_id = $1
`

type UpdateParagraphAudioURLParams struct {
	ParagraphID uuid.UUID      `json:"paragraph_id"`
	AudioUrl    sql.NullString `json:"audio_url"`
}

func (q *Queries) UpdateParagraphAudioURL(ctx context.Context, arg UpdateParagraphAudioURLParams) error {
	_, err := q.db.ExecContext(ctx, updateParagraphAudioURL, arg.ParagraphID, arg.AudioUrl)
	return err
}

const updateParagraphImageURL = `-- name: UpdateParagraphImageURL :exec
UPDATE Paragraphs
SET
    image_url = $2
WHERE
    paragraph_id = $1
`

type UpdateParagraphImageURLParams struct {
	ParagraphID uuid.UUID      `json:"paragraph_id"`
	ImageUrl    sql.NullString `json:"image_url"`
}

func (q *Queries) UpdateParagraphImageURL(ctx context.Context, arg UpdateParagraphImageURLParams) error {
	_, err := q.db.ExecContext(ctx, updateParagraphImageURL, arg.ParagraphID, arg.ImageUrl)
	return err
}

const updatePassword = `-- name: UpdatePassword :execresult
UPDATE users
SET password = $1, updated_at = NOW()
WHERE id = $2
`

type UpdatePasswordParams struct {
	Password string    `json:"password"`
	ID       uuid.UUID `json:"id"`
}

// UpdatePassword updates the password for a given user ID.
func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePassword, arg.Password, arg.ID)
}

const updateQuestion = `-- name: UpdateQuestion :exec
UPDATE Questions
SET
    question_content = $2,
    question_type = $3,
    part_id = $4,
    paragraph_id = $5,
    question_order = $6,
    toeic_question_section = $7,
    question_number_in_part = $8,
    answer_option = $9,
    correct_answer = $10
WHERE
    question_id = $1
`

type UpdateQuestionParams struct {
	QuestionID           uuid.UUID             `json:"question_id"`
	QuestionContent      string                `json:"question_content"`
	QuestionType         string                `json:"question_type"`
	PartID               uuid.UUID             `json:"part_id"`
	ParagraphID          uuid.NullUUID         `json:"paragraph_id"`
	QuestionOrder        int32                 `json:"question_order"`
	ToeicQuestionSection string                `json:"toeic_question_section"`
	QuestionNumberInPart sql.NullInt32         `json:"question_number_in_part"`
	AnswerOption         pqtype.NullRawMessage `json:"answer_option"`
	CorrectAnswer        sql.NullString        `json:"correct_answer"`
}

func (q *Queries) UpdateQuestion(ctx context.Context, arg UpdateQuestionParams) error {
	_, err := q.db.ExecContext(ctx, updateQuestion,
		arg.QuestionID,
		arg.QuestionContent,
		arg.QuestionType,
		arg.PartID,
		arg.ParagraphID,
		arg.QuestionOrder,
		arg.ToeicQuestionSection,
		arg.QuestionNumberInPart,
		arg.AnswerOption,
		arg.CorrectAnswer,
	)
	return err
}

const updateQuestionAudioURL = `-- name: UpdateQuestionAudioURL :exec
UPDATE Questions
SET
    audio_url = $2
WHERE
    question_id = $1
`

type UpdateQuestionAudioURLParams struct {
	QuestionID uuid.UUID      `json:"question_id"`
	AudioUrl   sql.NullString `json:"audio_url"`
}

func (q *Queries) UpdateQuestionAudioURL(ctx context.Context, arg UpdateQuestionAudioURLParams) error {
	_, err := q.db.ExecContext(ctx, updateQuestionAudioURL, arg.QuestionID, arg.AudioUrl)
	return err
}

const updateQuestionImageURL = `-- name: UpdateQuestionImageURL :exec
UPDATE Questions
SET
    image_url = $2
WHERE
    question_id = $1
`

type UpdateQuestionImageURLParams struct {
	QuestionID uuid.UUID      `json:"question_id"`
	ImageUrl   sql.NullString `json:"image_url"`
}

func (q *Queries) UpdateQuestionImageURL(ctx context.Context, arg UpdateQuestionImageURLParams) error {
	_, err := q.db.ExecContext(ctx, updateQuestionImageURL, arg.QuestionID, arg.ImageUrl)
	return err
}

const updateUserAvatar = `-- name: UpdateUserAvatar :exec
Update user_profiles
set avatar_url=$1
where user_id =$2
`

type UpdateUserAvatarParams struct {
	AvatarUrl sql.NullString `json:"avatar_url"`
	UserID    uuid.UUID      `json:"user_id"`
}

func (q *Queries) UpdateUserAvatar(ctx context.Context, arg UpdateUserAvatarParams) error {
	_, err := q.db.ExecContext(ctx, updateUserAvatar, arg.AvatarUrl, arg.UserID)
	return err
}

const updateUserProfile = `-- name: UpdateUserProfile :exec
Update user_profiles
set full_name = $1,birthday=$2,gender=$3,phone_number=$4,address=$5,bio=$6
where user_id =$7
`

type UpdateUserProfileParams struct {
	FullName    sql.NullString `json:"full_name"`
	Birthday    sql.NullTime   `json:"birthday"`
	Gender      sql.NullString `json:"gender"`
	PhoneNumber sql.NullString `json:"phone_number"`
	Address     sql.NullString `json:"address"`
	Bio         sql.NullString `json:"bio"`
	UserID      uuid.UUID      `json:"user_id"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateUserProfile,
		arg.FullName,
		arg.Birthday,
		arg.Gender,
		arg.PhoneNumber,
		arg.Address,
		arg.Bio,
		arg.UserID,
	)
	return err
}
