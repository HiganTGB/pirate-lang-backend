// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const assignPermissionToRole = `-- name: AssignPermissionToRole :exec
INSERT INTO role_permissions (role_id, permission_id)
VALUES ($1, $2)
`

type AssignPermissionToRoleParams struct {
	RoleID       uuid.UUID `json:"role_id"`
	PermissionID uuid.UUID `json:"permission_id"`
}

// AssignPermissionToRole assigns a permission to a role.
func (q *Queries) AssignPermissionToRole(ctx context.Context, arg AssignPermissionToRoleParams) error {
	_, err := q.db.ExecContext(ctx, assignPermissionToRole, arg.RoleID, arg.PermissionID)
	return err
}

const assignRoleToUser = `-- name: AssignRoleToUser :exec
INSERT INTO user_roles (user_id, role_id)
VALUES ($1, $2)
`

type AssignRoleToUserParams struct {
	UserID uuid.UUID `json:"user_id"`
	RoleID uuid.UUID `json:"role_id"`
}

// AssignRoleToUser assigns a role to a user.
func (q *Queries) AssignRoleToUser(ctx context.Context, arg AssignRoleToUserParams) error {
	_, err := q.db.ExecContext(ctx, assignRoleToUser, arg.UserID, arg.RoleID)
	return err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO users (user_name, email, password)
VALUES ($1, $2, $3)
RETURNING id, user_name, email
`

type CreateAccountParams struct {
	UserName string `json:"user_name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type CreateAccountRow struct {
	ID       uuid.UUID `json:"id"`
	UserName string    `json:"user_name"`
	Email    string    `json:"email"`
}

// CreateAccount creates a new user and returns selected fields.
func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (CreateAccountRow, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.UserName, arg.Email, arg.Password)
	var i CreateAccountRow
	err := row.Scan(&i.ID, &i.UserName, &i.Email)
	return i, err
}

const createPart = `-- name: CreatePart :exec

INSERT INTO parts(skill, name, description, sequence)
VALUES($1,$2,$3,$4)
`

type CreatePartParams struct {
	Skill       string         `json:"skill"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Sequence    int32          `json:"sequence"`
}

// ========================
// 002
// ========================
func (q *Queries) CreatePart(ctx context.Context, arg CreatePartParams) error {
	_, err := q.db.ExecContext(ctx, createPart,
		arg.Skill,
		arg.Name,
		arg.Description,
		arg.Sequence,
	)
	return err
}

const createPermission = `-- name: CreatePermission :exec
INSERT INTO permissions (name, description)
VALUES ($1, $2)
`

type CreatePermissionParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

// CreatePermission creates a new permission.
func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) error {
	_, err := q.db.ExecContext(ctx, createPermission, arg.Name, arg.Description)
	return err
}

const createQuestionGroup = `-- name: CreateQuestionGroup :one
INSERT INTO  question_groups
    (name, description, part_id,plan_type, group_type)
VALUES($1,$2,$3,$4,$5)
RETURNING question_group_id
`

type CreateQuestionGroupParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	PartID      uuid.UUID      `json:"part_id"`
	PlanType    string         `json:"plan_type"`
	GroupType   string         `json:"group_type"`
}

func (q *Queries) CreateQuestionGroup(ctx context.Context, arg CreateQuestionGroupParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createQuestionGroup,
		arg.Name,
		arg.Description,
		arg.PartID,
		arg.PlanType,
		arg.GroupType,
	)
	var question_group_id uuid.UUID
	err := row.Scan(&question_group_id)
	return question_group_id, err
}

const createRole = `-- name: CreateRole :exec
INSERT INTO roles (name, description)
VALUES ($1, $2)
`

type CreateRoleParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

// CreateRole creates a new role.
func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) error {
	_, err := q.db.ExecContext(ctx, createRole, arg.Name, arg.Description)
	return err
}

const createUserProfile = `-- name: CreateUserProfile :exec

INSERT INTO user_profiles(user_id, full_name, birthday, gender, phone_number, address, bio)
VALUES($1,$2,$3,$4,$5,$6,$7)
`

type CreateUserProfileParams struct {
	UserID      uuid.UUID      `json:"user_id"`
	FullName    sql.NullString `json:"full_name"`
	Birthday    sql.NullTime   `json:"birthday"`
	Gender      sql.NullString `json:"gender"`
	PhoneNumber sql.NullString `json:"phone_number"`
	Address     sql.NullString `json:"address"`
	Bio         sql.NullString `json:"bio"`
}

// 00002
// CreateUserProfile creates a new Userprofile.
func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) error {
	_, err := q.db.ExecContext(ctx, createUserProfile,
		arg.UserID,
		arg.FullName,
		arg.Birthday,
		arg.Gender,
		arg.PhoneNumber,
		arg.Address,
		arg.Bio,
	)
	return err
}

const deletePermission = `-- name: DeletePermission :exec
DELETE FROM permissions WHERE id = $1
`

// DeletePermission deletes a permission by its ID.
func (q *Queries) DeletePermission(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePermission, id)
	return err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles WHERE id = $1
`

// DeleteRole deletes a role by its ID.
func (q *Queries) DeleteRole(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRole, id)
	return err
}

const getAudioUrlGroup = `-- name: GetAudioUrlGroup :one
SELECT  context_audio_url
FROM question_groups
WHERE question_group_id=$1
`

func (q *Queries) GetAudioUrlGroup(ctx context.Context, questionGroupID uuid.UUID) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getAudioUrlGroup, questionGroupID)
	var context_audio_url sql.NullString
	err := row.Scan(&context_audio_url)
	return context_audio_url, err
}

const getImageUrlGroup = `-- name: GetImageUrlGroup :one
SELECT  context_image_url
FROM question_groups
WHERE question_group_id=$1
`

func (q *Queries) GetImageUrlGroup(ctx context.Context, questionGroupID uuid.UUID) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getImageUrlGroup, questionGroupID)
	var context_image_url sql.NullString
	err := row.Scan(&context_image_url)
	return context_image_url, err
}

const getPaginatedParts = `-- name: GetPaginatedParts :many
SELECT part_id, skill, name, description, sequence, created_at, updated_at
FROM parts
ORDER BY created_at ASC 
LIMIT $1 OFFSET $2
`

type GetPaginatedPartsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetPaginatedParts(ctx context.Context, arg GetPaginatedPartsParams) ([]Part, error) {
	rows, err := q.db.QueryContext(ctx, getPaginatedParts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Part{}
	for rows.Next() {
		var i Part
		if err := rows.Scan(
			&i.PartID,
			&i.Skill,
			&i.Name,
			&i.Description,
			&i.Sequence,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedQuestionGroups = `-- name: GetPaginatedQuestionGroups :many
SELECT question_group_id,name, description, part_id,plan_type, group_type
FROM question_groups
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetPaginatedQuestionGroupsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetPaginatedQuestionGroupsRow struct {
	QuestionGroupID uuid.UUID      `json:"question_group_id"`
	Name            string         `json:"name"`
	Description     sql.NullString `json:"description"`
	PartID          uuid.UUID      `json:"part_id"`
	PlanType        string         `json:"plan_type"`
	GroupType       string         `json:"group_type"`
}

func (q *Queries) GetPaginatedQuestionGroups(ctx context.Context, arg GetPaginatedQuestionGroupsParams) ([]GetPaginatedQuestionGroupsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPaginatedQuestionGroups, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPaginatedQuestionGroupsRow{}
	for rows.Next() {
		var i GetPaginatedQuestionGroupsRow
		if err := rows.Scan(
			&i.QuestionGroupID,
			&i.Name,
			&i.Description,
			&i.PartID,
			&i.PlanType,
			&i.GroupType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedUsers = `-- name: GetPaginatedUsers :many
SELECT id, user_name, email, created_at, updated_at
FROM users
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetPaginatedUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetPaginatedUsersRow struct {
	ID        uuid.UUID    `json:"id"`
	UserName  string       `json:"user_name"`
	Email     string       `json:"email"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

// GetPaginatedUsers retrieves a list of users with pagination.
func (q *Queries) GetPaginatedUsers(ctx context.Context, arg GetPaginatedUsersParams) ([]GetPaginatedUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getPaginatedUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPaginatedUsersRow{}
	for rows.Next() {
		var i GetPaginatedUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.UserName,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPart = `-- name: GetPart :one
SELECT part_id, skill, name, description, sequence, created_at, updated_at
FROM parts
WHERE part_id=$1
`

func (q *Queries) GetPart(ctx context.Context, partID uuid.UUID) (Part, error) {
	row := q.db.QueryRowContext(ctx, getPart, partID)
	var i Part
	err := row.Scan(
		&i.PartID,
		&i.Skill,
		&i.Name,
		&i.Description,
		&i.Sequence,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPartsCount = `-- name: GetPartsCount :one
SELECT COUNT(*) FROM parts
`

func (q *Queries) GetPartsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPartsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPermissions = `-- name: GetPermissions :many
SELECT id, name, description, created_at, updated_at
FROM permissions
`

// GetPermissions retrieves all permissions.
func (q *Queries) GetPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permission{}
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoles = `-- name: GetRoles :many
SELECT id, name, description, created_at, updated_at
FROM roles
`

// GetRoles retrieves all roles.
func (q *Queries) GetRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserAvatar = `-- name: GetUserAvatar :one
SELECT avatar_url
FROM  user_profiles
where user_id =$1
`

func (q *Queries) GetUserAvatar(ctx context.Context, userID uuid.UUID) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getUserAvatar, userID)
	var avatar_url sql.NullString
	err := row.Scan(&avatar_url)
	return avatar_url, err
}

const getUserByEmailOrUserNameOrId = `-- name: GetUserByEmailOrUserNameOrId :one
SELECT id, user_name, email, password, created_at, updated_at
FROM users
WHERE
    ($1::text IS NULL OR email = $1::text) AND
    ($2::text IS NULL OR user_name = $2::text) AND
    ($3::uuid IS NULL OR id = $3::uuid)
LIMIT 1
`

type GetUserByEmailOrUserNameOrIdParams struct {
	Email    sql.NullString `json:"email"`
	UserName sql.NullString `json:"user_name"`
	ID       uuid.NullUUID  `json:"id"`
}

type GetUserByEmailOrUserNameOrIdRow struct {
	ID        uuid.UUID    `json:"id"`
	UserName  string       `json:"user_name"`
	Email     string       `json:"email"`
	Password  string       `json:"password"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

// GetUserByEmailOrUserNameOrId retrieves a user by email, user_name, or id.
func (q *Queries) GetUserByEmailOrUserNameOrId(ctx context.Context, arg GetUserByEmailOrUserNameOrIdParams) (GetUserByEmailOrUserNameOrIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmailOrUserNameOrId, arg.Email, arg.UserName, arg.ID)
	var i GetUserByEmailOrUserNameOrIdRow
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserProfile = `-- name: GetUserProfile :one
SELECT
    user_id,u.email,u.user_name,full_name,birthday,gender,phone_number,address,avatar_url,bio
FROM
    user_profiles p join users u on p.user_id = u.id
WHERE
    user_id = $1
`

type GetUserProfileRow struct {
	UserID      uuid.UUID      `json:"user_id"`
	Email       string         `json:"email"`
	UserName    string         `json:"user_name"`
	FullName    sql.NullString `json:"full_name"`
	Birthday    sql.NullTime   `json:"birthday"`
	Gender      sql.NullString `json:"gender"`
	PhoneNumber sql.NullString `json:"phone_number"`
	Address     sql.NullString `json:"address"`
	AvatarUrl   sql.NullString `json:"avatar_url"`
	Bio         sql.NullString `json:"bio"`
}

func (q *Queries) GetUserProfile(ctx context.Context, userID uuid.UUID) (GetUserProfileRow, error) {
	row := q.db.QueryRowContext(ctx, getUserProfile, userID)
	var i GetUserProfileRow
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.UserName,
		&i.FullName,
		&i.Birthday,
		&i.Gender,
		&i.PhoneNumber,
		&i.Address,
		&i.AvatarUrl,
		&i.Bio,
	)
	return i, err
}

const getUsersCount = `-- name: GetUsersCount :one
SELECT COUNT(*) FROM users
`

// GetUsersCount returns the total number of users.
func (q *Queries) GetUsersCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUsersCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const hasPermission = `-- name: HasPermission :one
SELECT EXISTS(
    SELECT 1 FROM user_roles ur
                      JOIN role_permissions rp ON ur.role_id = rp.role_id
                      JOIN permissions p ON rp.permission_id = p.id
    WHERE ur.user_id = $1 AND p.id = $2
)
`

type HasPermissionParams struct {
	UserID uuid.UUID `json:"user_id"`
	ID     uuid.UUID `json:"id"`
}

// HasPermission checks if a user has a specific permission.
func (q *Queries) HasPermission(ctx context.Context, arg HasPermissionParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, hasPermission, arg.UserID, arg.ID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const lockUser = `-- name: LockUser :execresult
UPDATE users
set is_locked=true,lock_reason=$1,locked_at=now()
where id=$2
`

type LockUserParams struct {
	LockReason sql.NullString `json:"lock_reason"`
	ID         uuid.UUID      `json:"id"`
}

// LockUser to lock user account
func (q *Queries) LockUser(ctx context.Context, arg LockUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, lockUser, arg.LockReason, arg.ID)
}

const permissionExists = `-- name: PermissionExists :one
SELECT EXISTS(SELECT 1 FROM permissions WHERE id = $1)
`

// PermissionExists checks if a permission with the given ID exists.
func (q *Queries) PermissionExists(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, permissionExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const questionGroupExists = `-- name: QuestionGroupExists :one
SELECT EXISTS(SELECT 1 FROM question_groups WHERE question_group_id = $1)
`

func (q *Queries) QuestionGroupExists(ctx context.Context, questionGroupID uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, questionGroupExists, questionGroupID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const roleExists = `-- name: RoleExists :one
SELECT EXISTS(SELECT 1 FROM roles WHERE id = $1)
`

// RoleExists checks if a role with the given ID exists.
func (q *Queries) RoleExists(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, roleExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const unlockUser = `-- name: UnlockUser :execresult
UPDATE users
set is_locked=false,unlock_reason=$1,unlocked_at=now()
where id=$2
`

type UnlockUserParams struct {
	UnlockReason sql.NullString `json:"unlock_reason"`
	ID           uuid.UUID      `json:"id"`
}

// UnlockUser to unlock user account
func (q *Queries) UnlockUser(ctx context.Context, arg UnlockUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, unlockUser, arg.UnlockReason, arg.ID)
}

const updateAudioContentQuestionGroup = `-- name: UpdateAudioContentQuestionGroup :exec
UPDATE question_groups
SET context_audio_url=$1
WHERE question_group_id=$2
`

type UpdateAudioContentQuestionGroupParams struct {
	ContextAudioUrl sql.NullString `json:"context_audio_url"`
	QuestionGroupID uuid.UUID      `json:"question_group_id"`
}

func (q *Queries) UpdateAudioContentQuestionGroup(ctx context.Context, arg UpdateAudioContentQuestionGroupParams) error {
	_, err := q.db.ExecContext(ctx, updateAudioContentQuestionGroup, arg.ContextAudioUrl, arg.QuestionGroupID)
	return err
}

const updateImageContentQuestionGroup = `-- name: UpdateImageContentQuestionGroup :exec
UPDATE question_groups
SET context_image_url=$1
WHERE question_group_id=$2
`

type UpdateImageContentQuestionGroupParams struct {
	ContextImageUrl sql.NullString `json:"context_image_url"`
	QuestionGroupID uuid.UUID      `json:"question_group_id"`
}

func (q *Queries) UpdateImageContentQuestionGroup(ctx context.Context, arg UpdateImageContentQuestionGroupParams) error {
	_, err := q.db.ExecContext(ctx, updateImageContentQuestionGroup, arg.ContextImageUrl, arg.QuestionGroupID)
	return err
}

const updatePart = `-- name: UpdatePart :exec
UPDATE parts
SET skill=$1,name=$2,description=$3,sequence=$4
WHERE part_id=$5
`

type UpdatePartParams struct {
	Skill       string         `json:"skill"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Sequence    int32          `json:"sequence"`
	PartID      uuid.UUID      `json:"part_id"`
}

func (q *Queries) UpdatePart(ctx context.Context, arg UpdatePartParams) error {
	_, err := q.db.ExecContext(ctx, updatePart,
		arg.Skill,
		arg.Name,
		arg.Description,
		arg.Sequence,
		arg.PartID,
	)
	return err
}

const updatePassword = `-- name: UpdatePassword :execresult
UPDATE users
SET password = $1, updated_at = NOW()
WHERE id = $2
`

type UpdatePasswordParams struct {
	Password string    `json:"password"`
	ID       uuid.UUID `json:"id"`
}

// UpdatePassword updates the password for a given user ID.
func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePassword, arg.Password, arg.ID)
}

const updateQuestionGroup = `-- name: UpdateQuestionGroup :exec
UPDATE question_groups
SET name=$1,description=$2,part_id=$3,plan_type=$4,group_type=$5,context_text_content=$6
WHERE question_group_id=$7
`

type UpdateQuestionGroupParams struct {
	Name               string         `json:"name"`
	Description        sql.NullString `json:"description"`
	PartID             uuid.UUID      `json:"part_id"`
	PlanType           string         `json:"plan_type"`
	GroupType          string         `json:"group_type"`
	ContextTextContent sql.NullString `json:"context_text_content"`
	QuestionGroupID    uuid.UUID      `json:"question_group_id"`
}

func (q *Queries) UpdateQuestionGroup(ctx context.Context, arg UpdateQuestionGroupParams) error {
	_, err := q.db.ExecContext(ctx, updateQuestionGroup,
		arg.Name,
		arg.Description,
		arg.PartID,
		arg.PlanType,
		arg.GroupType,
		arg.ContextTextContent,
		arg.QuestionGroupID,
	)
	return err
}

const updateUserAvatar = `-- name: UpdateUserAvatar :exec
Update user_profiles
set avatar_url=$1
where user_id =$2
`

type UpdateUserAvatarParams struct {
	AvatarUrl sql.NullString `json:"avatar_url"`
	UserID    uuid.UUID      `json:"user_id"`
}

func (q *Queries) UpdateUserAvatar(ctx context.Context, arg UpdateUserAvatarParams) error {
	_, err := q.db.ExecContext(ctx, updateUserAvatar, arg.AvatarUrl, arg.UserID)
	return err
}

const updateUserProfile = `-- name: UpdateUserProfile :exec
Update user_profiles
set full_name = $1,birthday=$2,gender=$3,phone_number=$4,address=$5,bio=$6
where user_id =$7
`

type UpdateUserProfileParams struct {
	FullName    sql.NullString `json:"full_name"`
	Birthday    sql.NullTime   `json:"birthday"`
	Gender      sql.NullString `json:"gender"`
	PhoneNumber sql.NullString `json:"phone_number"`
	Address     sql.NullString `json:"address"`
	Bio         sql.NullString `json:"bio"`
	UserID      uuid.UUID      `json:"user_id"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateUserProfile,
		arg.FullName,
		arg.Birthday,
		arg.Gender,
		arg.PhoneNumber,
		arg.Address,
		arg.Bio,
		arg.UserID,
	)
	return err
}
