// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const assignPermissionToRole = `-- name: AssignPermissionToRole :exec
INSERT INTO role_permissions (role_id, permission_id)
VALUES ($1, $2)
`

type AssignPermissionToRoleParams struct {
	RoleID       uuid.UUID `json:"role_id"`
	PermissionID uuid.UUID `json:"permission_id"`
}

// AssignPermissionToRole assigns a permission to a role.
func (q *Queries) AssignPermissionToRole(ctx context.Context, arg AssignPermissionToRoleParams) error {
	_, err := q.db.ExecContext(ctx, assignPermissionToRole, arg.RoleID, arg.PermissionID)
	return err
}

const assignRoleToUser = `-- name: AssignRoleToUser :exec
INSERT INTO user_roles (user_id, role_id)
VALUES ($1, $2)
`

type AssignRoleToUserParams struct {
	UserID uuid.UUID `json:"user_id"`
	RoleID uuid.UUID `json:"role_id"`
}

// AssignRoleToUser assigns a role to a user.
func (q *Queries) AssignRoleToUser(ctx context.Context, arg AssignRoleToUserParams) error {
	_, err := q.db.ExecContext(ctx, assignRoleToUser, arg.UserID, arg.RoleID)
	return err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO users (user_name, email, password)
VALUES ($1, $2, $3)
RETURNING id, user_name, email
`

type CreateAccountParams struct {
	UserName string `json:"user_name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type CreateAccountRow struct {
	ID       uuid.UUID `json:"id"`
	UserName string    `json:"user_name"`
	Email    string    `json:"email"`
}

// CreateAccount creates a new user and returns selected fields.
func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (CreateAccountRow, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.UserName, arg.Email, arg.Password)
	var i CreateAccountRow
	err := row.Scan(&i.ID, &i.UserName, &i.Email)
	return i, err
}

const createPermission = `-- name: CreatePermission :exec
INSERT INTO permissions (name, description)
VALUES ($1, $2)
`

type CreatePermissionParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

// CreatePermission creates a new permission.
func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) error {
	_, err := q.db.ExecContext(ctx, createPermission, arg.Name, arg.Description)
	return err
}

const createRole = `-- name: CreateRole :exec
INSERT INTO roles (name, description)
VALUES ($1, $2)
`

type CreateRoleParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

// CreateRole creates a new role.
func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) error {
	_, err := q.db.ExecContext(ctx, createRole, arg.Name, arg.Description)
	return err
}

const deletePermission = `-- name: DeletePermission :exec
DELETE FROM permissions WHERE id = $1
`

// DeletePermission deletes a permission by its ID.
func (q *Queries) DeletePermission(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePermission, id)
	return err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles WHERE id = $1
`

// DeleteRole deletes a role by its ID.
func (q *Queries) DeleteRole(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRole, id)
	return err
}

const getPaginatedUsers = `-- name: GetPaginatedUsers :many
SELECT id, user_name, email, created_at, updated_at
FROM users
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetPaginatedUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetPaginatedUsersRow struct {
	ID        uuid.UUID    `json:"id"`
	UserName  string       `json:"user_name"`
	Email     string       `json:"email"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

// GetPaginatedUsers retrieves a list of users with pagination.
func (q *Queries) GetPaginatedUsers(ctx context.Context, arg GetPaginatedUsersParams) ([]GetPaginatedUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getPaginatedUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPaginatedUsersRow{}
	for rows.Next() {
		var i GetPaginatedUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.UserName,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissions = `-- name: GetPermissions :many
SELECT id, name, description, created_at, updated_at
FROM permissions
`

// GetPermissions retrieves all permissions.
func (q *Queries) GetPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permission{}
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoles = `-- name: GetRoles :many
SELECT id, name, description, created_at, updated_at
FROM roles
`

// GetRoles retrieves all roles.
func (q *Queries) GetRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmailOrUserNameOrId = `-- name: GetUserByEmailOrUserNameOrId :one
SELECT id, user_name, email, password, created_at, updated_at
FROM users
WHERE
    ($1::text IS NULL OR email = $1::text) AND
    ($2::text IS NULL OR user_name = $2::text) AND
    ($3::uuid IS NULL OR id = $3::uuid)
LIMIT 1
`

type GetUserByEmailOrUserNameOrIdParams struct {
	Email    sql.NullString `json:"email"`
	UserName sql.NullString `json:"user_name"`
	ID       uuid.NullUUID  `json:"id"`
}

type GetUserByEmailOrUserNameOrIdRow struct {
	ID        uuid.UUID    `json:"id"`
	UserName  string       `json:"user_name"`
	Email     string       `json:"email"`
	Password  string       `json:"password"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

// GetUserByEmailOrUserNameOrId retrieves a user by email, user_name, or id.
func (q *Queries) GetUserByEmailOrUserNameOrId(ctx context.Context, arg GetUserByEmailOrUserNameOrIdParams) (GetUserByEmailOrUserNameOrIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmailOrUserNameOrId, arg.Email, arg.UserName, arg.ID)
	var i GetUserByEmailOrUserNameOrIdRow
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsersCount = `-- name: GetUsersCount :one
SELECT COUNT(*) FROM users
`

// GetUsersCount returns the total number of users.
func (q *Queries) GetUsersCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUsersCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const hasPermission = `-- name: HasPermission :one
SELECT EXISTS(
    SELECT 1 FROM user_roles ur
                      JOIN role_permissions rp ON ur.role_id = rp.role_id
                      JOIN permissions p ON rp.permission_id = p.id
    WHERE ur.user_id = $1 AND p.id = $2
)
`

type HasPermissionParams struct {
	UserID uuid.UUID `json:"user_id"`
	ID     uuid.UUID `json:"id"`
}

// HasPermission checks if a user has a specific permission.
func (q *Queries) HasPermission(ctx context.Context, arg HasPermissionParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, hasPermission, arg.UserID, arg.ID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const permissionExists = `-- name: PermissionExists :one
SELECT EXISTS(SELECT 1 FROM permissions WHERE id = $1)
`

// PermissionExists checks if a permission with the given ID exists.
func (q *Queries) PermissionExists(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, permissionExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const roleExists = `-- name: RoleExists :one
SELECT EXISTS(SELECT 1 FROM roles WHERE id = $1)
`

// RoleExists checks if a role with the given ID exists.
func (q *Queries) RoleExists(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, roleExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updatePassword = `-- name: UpdatePassword :execresult
UPDATE users
SET password = $1, updated_at = NOW()
WHERE id = $2
`

type UpdatePasswordParams struct {
	Password string    `json:"password"`
	ID       uuid.UUID `json:"id"`
}

// UpdatePassword updates the password for a given user ID.
func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePassword, arg.Password, arg.ID)
}
